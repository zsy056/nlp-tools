#!/usr/bin/env python
# -*- coding: utf8 -*-
# Get sentences from text

import sys

senends = ['。', '！', '？', '…', '~', '～', '!', '?', '.', '．'] 
endfollow = ['\'', '"', '”', '’', '.']
possible_encodings = ['utf8', 'gbk']

# Remove spaces in text
def rm_space(text):
    ret_str = ''
    for char in text:
        if not char.isspace():
            ret_str += char
    return ret_str

# Remove meta data in <>
def rm_metadata(text):
    ret_str = ''
    in_meta = False
    for char in text:
        if not in_meta:
            if char == '<':
                in_meta = True
            else:
                ret_str += char
        else:
            if char == '>':
                in_meta = False

    return ret_str

# Segment sentences from text
def seg_sen(text):
    sen_lst = []
    buf_str = ''
    in_fo = False
    for char in text:
        if (not in_fo) and (char in senends):
            in_fo = True
            buf_str += char
            continue
        if in_fo:
            if (char in endfollow) or (char in senends):
                buf_str += char
            else:
                in_fo = False
                sen_lst.append(buf_str)
                buf_str = char
            continue
        buf_str += char
    # Collect the rest of text
    sen_lst.append(buf_str)

    return sen_lst

# Get text from file
def get_text(filepath):
    txt_buf = ''
    file = None
    # test file encoding
    for encoding in possible_encodings:
        try:
            file = open(filepath, 'r', encoding=encoding)
            file.readlines()
            file.seek(0)
        except UnicodeDecodeError:
            print('not encode in %s' % encoding)
        else:
            while True:
                line = file.readline()
                if line == '': break
                # Remove meta data
                if line[0] == '<': continue
                txt_buf += line
            # convert source to utf8 if necessary
            if encoding != 'utf8':
                file.seek(0)
                contents = file.readlines()
                file.close()
                file = open(filepath, 'w', encoding='utf8')
                print(''.join(contents), file=file)
            file.close()
             
    return txt_buf
        

def main(argv):
    if len(argv) != 3:
        print('Usage:\nch-sen-seg inputfile outputfile', file=sys.stderr)
        exit(1)
    inputfile = argv[1]
    outputfile = argv[2]
    text = get_text(inputfile) 
    sen_lst = seg_sen(rm_metadata(rm_space(text)))
    outf = open(outputfile, 'w', encoding='utf8')
    for sen in sen_lst:
        print(sen, file=outf)

if __name__ == '__main__':
    main(sys.argv)
